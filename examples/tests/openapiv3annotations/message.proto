// Copyright 2021 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package tests.openapiv3annotations.message.v1;

import "google/api/annotations.proto";
import "openapiv3/annotations.proto";
import "openapiv3/service.proto";

option go_package = "github.com/google/gnostic/apps/protoc-gen-openapi/examples/tests/openapiv3annotations/message/v1;message";
option (openapi.v3.document) = {
  info: {
    title: "Title from annotation"
    version: "Version from annotation"
    description: "Description from annotation"
    contact: {
      name: "Contact Name"
      url: "https://github.com/google/gnostic"
      email: "gnostic@google.com"
    }
    license: {
      name: "Apache License"
      url: "https://github.com/google/gnostic/blob/master/LICENSE"
    }
  }
  components: {
    security_schemes: {
      additional_properties: [
        {
          name: "BasicAuth"
          value: {
            security_scheme: {
              type: "http"
              scheme: "basic"
            }
          }
        }
      ]
    }
  }
};

service Messaging1 {
  option (openapi.v3.service) = {
    security: [
      {name: "ApiKeyAuth"},
      {name: "BasicAuth"},
      {name: "ApiKeyAuth"}]
    parameters: [
      {
        description: "jwt token"
        in: "header"
        name: "Authorization"
        required: true
      }
    ]
    extensions: [
      {
        name: "x-service-id"
        value: {yaml: "messaging"}
      }
    ]
  };

  rpc UpdateMessage(Message) returns (Message) {
    option (google.api.http) = {
      patch: "/v1/messages/{id}"
      body: "*"
    };

    option (openapi.v3.operation) = {
      tags: ["abc=def"]
      specification_extension: [
        {
          name: "x-operation-id"
          value: {yaml: "updateMessage"}
        }
      ]
      parameters: [
        {
          parameter: {
            description: "jwt token"
            in: "header"
            name: "Authorization"
            required: true
          }
        }
      ]
      security: [
        {
          additional_properties: [
            {
              name: "BasicAuth"
              value: {}
            }
          ]
        }
      ]
    };
  }
}

service Messaging2 {
  rpc UpdateMessage(Message) returns (Message) {
    option (openapi.v3.operation) = {
      tags: ["abc=def"]
      specification_extension: [
        {
          name: "x-operation-id"
          value: {yaml: "updateMessage"}
        }
      ]
      parameters: [
        {
          parameter: {
            description: "jwt token"
            in: "header"
            name: "Authorization"
            required: true
          }
        }
      ]
      security: [
        {
          additional_properties: [
            {
              name: "BasicAuth"
              value: {}
            }
          ]
        }
      ]
    };
  }
}

message Message {
  option (openapi.v3.schema) = {title: "This is an overridden message schema title"};

  int64 id = 1;
  string label = 2 [(openapi.v3.property) = {
    title: "this is an overriden field schema title"
    max_length: 255
  }];
}
