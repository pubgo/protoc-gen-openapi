openapi: 3.1.0
info:
  title: google.example.library.v1
paths:
  /v1/shelves:
    get:
      tags:
        - google.example.library.v1.LibraryService
      summary: ListShelves
      description: |-
        Lists shelves. The order is unspecified but deterministic. Newly created
         shelves will not necessarily be added to the end of this list.
      operationId: google.example.library.v1.LibraryService.ListShelves
      parameters:
        - name: pageSize
          in: query
          description: |-
            Requested page size. Server may return fewer shelves than requested.
             If unspecified, server will pick an appropriate default.
          schema:
            type: integer
            title: page_size
            format: int32
            description: |-
              Requested page size. Server may return fewer shelves than requested.
               If unspecified, server will pick an appropriate default.
        - name: pageToken
          in: query
          description: |-
            A token identifying a page of results the server should return.
             Typically, this is the value of
             [ListShelvesResponse.next_page_token][google.example.library.v1.ListShelvesResponse.next_page_token]
             returned from the previous call to `ListShelves` method.
          schema:
            type: string
            title: page_token
            description: |-
              A token identifying a page of results the server should return.
               Typically, this is the value of
               [ListShelvesResponse.next_page_token][google.example.library.v1.ListShelvesResponse.next_page_token]
               returned from the previous call to `ListShelves` method.
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lava.error'
            application/proto:
              schema:
                $ref: '#/components/schemas/lava.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/google.example.library.v1.ListShelvesResponse'
    post:
      tags:
        - google.example.library.v1.LibraryService
      summary: CreateShelf
      description: Creates a shelf, and returns the new Shelf.
      operationId: google.example.library.v1.LibraryService.CreateShelf
      requestBody:
        description: The shelf to create.
        content:
          application/json:
            schema:
              title: shelf
              description: The shelf to create.
              $ref: '#/components/schemas/google.example.library.v1.Shelf'
          application/proto:
            schema:
              title: shelf
              description: The shelf to create.
              $ref: '#/components/schemas/google.example.library.v1.Shelf'
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lava.error'
            application/proto:
              schema:
                $ref: '#/components/schemas/lava.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/google.example.library.v1.Shelf'
  /v1/{name=shelves/*}:
    get:
      tags:
        - google.example.library.v1.LibraryService
      summary: GetShelf
      description: Gets a shelf. Returns NOT_FOUND if the shelf does not exist.
      operationId: google.example.library.v1.LibraryService.GetShelf
      parameters:
        - name: name
          in: path
          description: The name of the shelf to retrieve.
          required: true
          schema:
            type: string
            title: name
            description: The name of the shelf to retrieve.
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lava.error'
            application/proto:
              schema:
                $ref: '#/components/schemas/lava.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/google.example.library.v1.Shelf'
    delete:
      tags:
        - google.example.library.v1.LibraryService
      summary: DeleteShelf
      description: Deletes a shelf. Returns NOT_FOUND if the shelf does not exist.
      operationId: google.example.library.v1.LibraryService.DeleteShelf
      parameters:
        - name: name
          in: path
          description: The name of the shelf to delete.
          required: true
          schema:
            type: string
            title: name
            description: The name of the shelf to delete.
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lava.error'
            application/proto:
              schema:
                $ref: '#/components/schemas/lava.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/google.protobuf.Empty'
  /v1/{name=shelves/*}:merge:
    post:
      tags:
        - google.example.library.v1.LibraryService
      summary: MergeShelves
      description: |-
        Merges two shelves by adding all books from the shelf named
         `other_shelf_name` to shelf `name`, and deletes
         `other_shelf_name`. Returns the updated shelf.
         The book ids of the moved books may not be the same as the original books.

         Returns NOT_FOUND if either shelf does not exist.
         This call is a no-op if the specified shelves are the same.
      operationId: google.example.library.v1.LibraryService.MergeShelves
      parameters:
        - name: name
          in: path
          description: The name of the shelf we're adding books to.
          required: true
          schema:
            type: string
            title: name
            description: The name of the shelf we're adding books to.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                otherShelfName:
                  type: string
                  title: other_shelf_name
                  description: The name of the shelf we're removing books from and deleting.
              title: MergeShelvesRequest
              required:
                - name
                - otherShelfName
              additionalProperties: false
              description: |-
                Describes the shelf being removed (other_shelf_name) and updated
                 (name) in this merge.
          application/proto:
            schema:
              type: object
              properties:
                otherShelfName:
                  type: string
                  title: other_shelf_name
                  description: The name of the shelf we're removing books from and deleting.
              title: MergeShelvesRequest
              required:
                - name
                - otherShelfName
              additionalProperties: false
              description: |-
                Describes the shelf being removed (other_shelf_name) and updated
                 (name) in this merge.
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lava.error'
            application/proto:
              schema:
                $ref: '#/components/schemas/lava.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/google.example.library.v1.Shelf'
  /v1/{name=shelves/*}/books:
    get:
      tags:
        - google.example.library.v1.LibraryService
      summary: ListBooks
      description: |-
        Lists books in a shelf. The order is unspecified but deterministic. Newly
         created books will not necessarily be added to the end of this list.
         Returns NOT_FOUND if the shelf does not exist.
      operationId: google.example.library.v1.LibraryService.ListBooks
      parameters:
        - name: name
          in: path
          description: The name of the shelf whose books we'd like to list.
          required: true
          schema:
            type: string
            title: name
            description: The name of the shelf whose books we'd like to list.
        - name: pageSize
          in: query
          description: |-
            Requested page size. Server may return fewer books than requested.
             If unspecified, server will pick an appropriate default.
          schema:
            type: integer
            title: page_size
            format: int32
            description: |-
              Requested page size. Server may return fewer books than requested.
               If unspecified, server will pick an appropriate default.
        - name: pageToken
          in: query
          description: |-
            A token identifying a page of results the server should return.
             Typically, this is the value of
             [ListBooksResponse.next_page_token][google.example.library.v1.ListBooksResponse.next_page_token].
             returned from the previous call to `ListBooks` method.
          schema:
            type: string
            title: page_token
            description: |-
              A token identifying a page of results the server should return.
               Typically, this is the value of
               [ListBooksResponse.next_page_token][google.example.library.v1.ListBooksResponse.next_page_token].
               returned from the previous call to `ListBooks` method.
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lava.error'
            application/proto:
              schema:
                $ref: '#/components/schemas/lava.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/google.example.library.v1.ListBooksResponse'
    post:
      tags:
        - google.example.library.v1.LibraryService
      summary: CreateBook
      description: Creates a book, and returns the new Book.
      operationId: google.example.library.v1.LibraryService.CreateBook
      parameters:
        - name: name
          in: path
          description: The name of the shelf in which the book is created.
          required: true
          schema:
            type: string
            title: name
            description: The name of the shelf in which the book is created.
      requestBody:
        description: The book to create.
        content:
          application/json:
            schema:
              title: book
              description: The book to create.
              $ref: '#/components/schemas/google.example.library.v1.Book'
          application/proto:
            schema:
              title: book
              description: The book to create.
              $ref: '#/components/schemas/google.example.library.v1.Book'
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lava.error'
            application/proto:
              schema:
                $ref: '#/components/schemas/lava.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/google.example.library.v1.Book'
  /v1/{name=shelves/*/books/*}:
    get:
      tags:
        - google.example.library.v1.LibraryService
      summary: GetBook
      description: Gets a book. Returns NOT_FOUND if the book does not exist.
      operationId: google.example.library.v1.LibraryService.GetBook
      parameters:
        - name: name
          in: path
          description: The name of the book to retrieve.
          required: true
          schema:
            type: string
            title: name
            description: The name of the book to retrieve.
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lava.error'
            application/proto:
              schema:
                $ref: '#/components/schemas/lava.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/google.example.library.v1.Book'
    delete:
      tags:
        - google.example.library.v1.LibraryService
      summary: DeleteBook
      description: Deletes a book. Returns NOT_FOUND if the book does not exist.
      operationId: google.example.library.v1.LibraryService.DeleteBook
      parameters:
        - name: name
          in: path
          description: The name of the book to delete.
          required: true
          schema:
            type: string
            title: name
            description: The name of the book to delete.
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lava.error'
            application/proto:
              schema:
                $ref: '#/components/schemas/lava.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/google.protobuf.Empty'
  /v1/{book.name=shelves/*/books/*}:
    put:
      tags:
        - google.example.library.v1.LibraryService
      summary: UpdateBook
      description: |-
        Updates a book. Returns INVALID_ARGUMENT if the name of the book
         is non-empty and does not equal the existing name.
      operationId: google.example.library.v1.LibraryService.UpdateBook
      parameters:
        - name: book.name
          in: path
          description: |-
            The resource name of the book.
             Book names have the form `shelves/{shelf_id}/books/{book_id}`.
             The name is ignored when creating a book.
          required: true
          schema:
            type: string
            title: name
            description: |-
              The resource name of the book.
               Book names have the form `shelves/{shelf_id}/books/{book_id}`.
               The name is ignored when creating a book.
      requestBody:
        description: The book to update with. The name must match or be empty.
        content:
          application/json:
            schema:
              title: book
              description: The book to update with. The name must match or be empty.
              $ref: '#/components/schemas/google.example.library.v1.Book'
          application/proto:
            schema:
              title: book
              description: The book to update with. The name must match or be empty.
              $ref: '#/components/schemas/google.example.library.v1.Book'
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lava.error'
            application/proto:
              schema:
                $ref: '#/components/schemas/lava.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/google.example.library.v1.Book'
  /v1/{name=shelves/*/books/*}:move:
    post:
      tags:
        - google.example.library.v1.LibraryService
      summary: MoveBook
      description: |-
        Moves a book to another shelf, and returns the new book. The book
         id of the new book may not be the same as the original book.
      operationId: google.example.library.v1.LibraryService.MoveBook
      parameters:
        - name: name
          in: path
          description: The name of the book to move.
          required: true
          schema:
            type: string
            title: name
            description: The name of the book to move.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                otherShelfName:
                  type: string
                  title: other_shelf_name
                  description: The name of the destination shelf.
              title: MoveBookRequest
              required:
                - name
                - otherShelfName
              additionalProperties: false
              description: |-
                Describes what book to move (name) and what shelf we're moving it
                 to (other_shelf_name).
          application/proto:
            schema:
              type: object
              properties:
                otherShelfName:
                  type: string
                  title: other_shelf_name
                  description: The name of the destination shelf.
              title: MoveBookRequest
              required:
                - name
                - otherShelfName
              additionalProperties: false
              description: |-
                Describes what book to move (name) and what shelf we're moving it
                 to (other_shelf_name).
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lava.error'
            application/proto:
              schema:
                $ref: '#/components/schemas/lava.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/google.example.library.v1.Book'
components:
  schemas:
    google.example.library.v1.Book.Status:
      type: string
      title: Status
      format: enum
      enum:
        - draft
        - published
      description: |
        - draft: 未上架
        - published: 上架
      default: draft
    google.example.library.v1.Book:
      type: object
      properties:
        name:
          type: string
          title: name
          description: |-
            The resource name of the book.
             Book names have the form `shelves/{shelf_id}/books/{book_id}`.
             The name is ignored when creating a book.
        author:
          type: string
          title: author
          description: The name of the book author.
        title:
          type: string
          title: title
          description: The title of the book.
        read:
          type: boolean
          title: read
          description: Value indicating whether the book has been read.
        borrowTime:
          title: borrow_time
          description: The previous borrowing timestamp.
          readOnly: true
          $ref: '#/components/schemas/google.protobuf.Timestamp'
        createdAt:
          title: created_at
          description: The creation date and time.
          readOnly: true
          $ref: '#/components/schemas/google.type.DateTime'
        updatedAt:
          title: updated_at
          description: The last update date and time.
          readOnly: true
          $ref: '#/components/schemas/google.type.DateTime'
        status:
          title: status
          nullable: true
          $ref: '#/components/schemas/google.example.library.v1.Book.Status'
      title: Book
      required:
        - name
      additionalProperties: false
      description: A single book in the library.
    google.example.library.v1.CreateBookRequest:
      type: object
      properties:
        name:
          type: string
          title: name
          description: The name of the shelf in which the book is created.
        book:
          title: book
          description: The book to create.
          $ref: '#/components/schemas/google.example.library.v1.Book'
      title: CreateBookRequest
      required:
        - name
        - book
      additionalProperties: false
      description: Request message for LibraryService.CreateBook.
    google.example.library.v1.CreateShelfRequest:
      type: object
      properties:
        shelf:
          title: shelf
          description: The shelf to create.
          $ref: '#/components/schemas/google.example.library.v1.Shelf'
      title: CreateShelfRequest
      required:
        - shelf
      additionalProperties: false
      description: Request message for LibraryService.CreateShelf.
    google.example.library.v1.DeleteBookRequest:
      type: object
      properties:
        name:
          type: string
          title: name
          description: The name of the book to delete.
      title: DeleteBookRequest
      required:
        - name
      additionalProperties: false
      description: Request message for LibraryService.DeleteBook.
    google.example.library.v1.DeleteShelfRequest:
      type: object
      properties:
        name:
          type: string
          title: name
          description: The name of the shelf to delete.
      title: DeleteShelfRequest
      required:
        - name
      additionalProperties: false
      description: Request message for LibraryService.DeleteShelf.
    google.example.library.v1.GetBookRequest:
      type: object
      properties:
        name:
          type: string
          title: name
          description: The name of the book to retrieve.
      title: GetBookRequest
      required:
        - name
      additionalProperties: false
      description: Request message for LibraryService.GetBook.
    google.example.library.v1.GetShelfRequest:
      type: object
      properties:
        name:
          type: string
          title: name
          description: The name of the shelf to retrieve.
      title: GetShelfRequest
      required:
        - name
      additionalProperties: false
      description: Request message for LibraryService.GetShelf.
    google.example.library.v1.ListBooksRequest:
      type: object
      properties:
        name:
          type: string
          title: name
          description: The name of the shelf whose books we'd like to list.
        pageSize:
          type: integer
          title: page_size
          format: int32
          description: |-
            Requested page size. Server may return fewer books than requested.
             If unspecified, server will pick an appropriate default.
        pageToken:
          type: string
          title: page_token
          description: |-
            A token identifying a page of results the server should return.
             Typically, this is the value of
             [ListBooksResponse.next_page_token][google.example.library.v1.ListBooksResponse.next_page_token].
             returned from the previous call to `ListBooks` method.
      title: ListBooksRequest
      required:
        - name
      additionalProperties: false
      description: Request message for LibraryService.ListBooks.
    google.example.library.v1.ListBooksResponse:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/google.example.library.v1.Book'
          title: books
          description: The list of books.
        nextPageToken:
          type: string
          title: next_page_token
          description: |-
            A token to retrieve next page of results.
             Pass this value in the
             [ListBooksRequest.page_token][google.example.library.v1.ListBooksRequest.page_token]
             field in the subsequent call to `ListBooks` method to retrieve the next
             page of results.
      title: ListBooksResponse
      additionalProperties: false
      description: Response message for LibraryService.ListBooks.
    google.example.library.v1.ListShelvesRequest:
      type: object
      properties:
        pageSize:
          type: integer
          title: page_size
          format: int32
          description: |-
            Requested page size. Server may return fewer shelves than requested.
             If unspecified, server will pick an appropriate default.
        pageToken:
          type: string
          title: page_token
          description: |-
            A token identifying a page of results the server should return.
             Typically, this is the value of
             [ListShelvesResponse.next_page_token][google.example.library.v1.ListShelvesResponse.next_page_token]
             returned from the previous call to `ListShelves` method.
      title: ListShelvesRequest
      additionalProperties: false
      description: Request message for LibraryService.ListShelves.
    google.example.library.v1.ListShelvesResponse:
      type: object
      properties:
        shelves:
          type: array
          items:
            $ref: '#/components/schemas/google.example.library.v1.Shelf'
          title: shelves
          description: The list of shelves.
        nextPageToken:
          type: string
          title: next_page_token
          description: |-
            A token to retrieve next page of results.
             Pass this value in the
             [ListShelvesRequest.page_token][google.example.library.v1.ListShelvesRequest.page_token]
             field in the subsequent call to `ListShelves` method to retrieve the next
             page of results.
      title: ListShelvesResponse
      additionalProperties: false
      description: Response message for LibraryService.ListShelves.
    google.example.library.v1.MergeShelvesRequest:
      type: object
      properties:
        name:
          type: string
          title: name
          description: The name of the shelf we're adding books to.
        otherShelfName:
          type: string
          title: other_shelf_name
          description: The name of the shelf we're removing books from and deleting.
      title: MergeShelvesRequest
      required:
        - name
        - otherShelfName
      additionalProperties: false
      description: |-
        Describes the shelf being removed (other_shelf_name) and updated
         (name) in this merge.
    google.example.library.v1.MoveBookRequest:
      type: object
      properties:
        name:
          type: string
          title: name
          description: The name of the book to move.
        otherShelfName:
          type: string
          title: other_shelf_name
          description: The name of the destination shelf.
      title: MoveBookRequest
      required:
        - name
        - otherShelfName
      additionalProperties: false
      description: |-
        Describes what book to move (name) and what shelf we're moving it
         to (other_shelf_name).
    google.example.library.v1.Shelf:
      type: object
      properties:
        name:
          type: string
          title: name
          description: |-
            The resource name of the shelf.
             Shelf names have the form `shelves/{shelf_id}`.
             The name is ignored when creating a shelf.
        theme:
          type: string
          title: theme
          description: The theme of the shelf
        nextSortAt:
          title: next_sort_at
          description: The next sorting date.
          readOnly: true
          $ref: '#/components/schemas/google.type.Date'
        createdAt:
          title: created_at
          description: The creation date and time.
          readOnly: true
          $ref: '#/components/schemas/google.type.DateTime'
        updatedAt:
          title: updated_at
          description: The last update date and time.
          readOnly: true
          $ref: '#/components/schemas/google.type.DateTime'
      title: Shelf
      required:
        - name
      additionalProperties: false
      description: A Shelf contains a collection of books with a theme.
    google.example.library.v1.UpdateBookRequest:
      type: object
      properties:
        name:
          type: string
          title: name
          description: The name of the book to update.
        book:
          title: book
          description: The book to update with. The name must match or be empty.
          $ref: '#/components/schemas/google.example.library.v1.Book'
      title: UpdateBookRequest
      required:
        - name
        - book
      additionalProperties: false
      description: Request message for LibraryService.UpdateBook.
    google.protobuf.Duration:
      type: string
      pattern: ^[-\+]?([0-9]+\.?[0-9]*|\.[0-9]+)s$
      format: regex
      description: |-
        A Duration represents a signed, fixed-length span of time represented
         as a count of seconds and fractions of seconds at nanosecond
         resolution. It is independent of any calendar and concepts like "day"
         or "month". It is related to Timestamp in that the difference between
         two Timestamp values is a Duration and it can be added or subtracted
         from a Timestamp. Range is approximately +-10,000 years.

         # Examples

         Example 1: Compute Duration from two Timestamps in pseudo code.

             Timestamp start = ...;
             Timestamp end = ...;
             Duration duration = ...;

             duration.seconds = end.seconds - start.seconds;
             duration.nanos = end.nanos - start.nanos;

             if (duration.seconds < 0 && duration.nanos > 0) {
               duration.seconds += 1;
               duration.nanos -= 1000000000;
             } else if (duration.seconds > 0 && duration.nanos < 0) {
               duration.seconds -= 1;
               duration.nanos += 1000000000;
             }

         Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.

             Timestamp start = ...;
             Duration duration = ...;
             Timestamp end = ...;

             end.seconds = start.seconds + duration.seconds;
             end.nanos = start.nanos + duration.nanos;

             if (end.nanos < 0) {
               end.seconds -= 1;
               end.nanos += 1000000000;
             } else if (end.nanos >= 1000000000) {
               end.seconds += 1;
               end.nanos -= 1000000000;
             }

         Example 3: Compute Duration from datetime.timedelta in Python.

             td = datetime.timedelta(days=3, minutes=10)
             duration = Duration()
             duration.FromTimedelta(td)

         # JSON Mapping

         In JSON format, the Duration type is encoded as a string rather than an
         object, where the string ends in the suffix "s" (indicating seconds) and
         is preceded by the number of seconds, with nanoseconds expressed as
         fractional seconds. For example, 3 seconds with 0 nanoseconds should be
         encoded in JSON format as "3s", while 3 seconds and 1 nanosecond should
         be expressed in JSON format as "3.000000001s", and 3 seconds and 1
         microsecond should be expressed in JSON format as "3.000001s".
    google.protobuf.Empty:
      type: object
      description: |-
        A generic empty message that you can re-use to avoid defining duplicated
         empty messages in your APIs. A typical example is to use it as the request
         or the response type of an API method. For instance:

             service Foo {
               rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
             }
    google.protobuf.Timestamp:
      type: string
      format: date-time
      description: |-
        A Timestamp represents a point in time independent of any time zone or local
         calendar, encoded as a count of seconds and fractions of seconds at
         nanosecond resolution. The count is relative to an epoch at UTC midnight on
         January 1, 1970, in the proleptic Gregorian calendar which extends the
         Gregorian calendar backwards to year one.

         All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
         second table is needed for interpretation, using a [24-hour linear
         smear](https://developers.google.com/time/smear).

         The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
         restricting to that range, we ensure that we can convert to and from [RFC
         3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.

         # Examples

         Example 1: Compute Timestamp from POSIX `time()`.

             Timestamp timestamp;
             timestamp.set_seconds(time(NULL));
             timestamp.set_nanos(0);

         Example 2: Compute Timestamp from POSIX `gettimeofday()`.

             struct timeval tv;
             gettimeofday(&tv, NULL);

             Timestamp timestamp;
             timestamp.set_seconds(tv.tv_sec);
             timestamp.set_nanos(tv.tv_usec * 1000);

         Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

             FILETIME ft;
             GetSystemTimeAsFileTime(&ft);
             UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

             // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
             // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
             Timestamp timestamp;
             timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
             timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));

         Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

             long millis = System.currentTimeMillis();

             Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
                 .setNanos((int) ((millis % 1000) * 1000000)).build();

         Example 5: Compute Timestamp from Java `Instant.now()`.

             Instant now = Instant.now();

             Timestamp timestamp =
                 Timestamp.newBuilder().setSeconds(now.getEpochSecond())
                     .setNanos(now.getNano()).build();

         Example 6: Compute Timestamp from current time in Python.

             timestamp = Timestamp()
             timestamp.GetCurrentTime()

         # JSON Mapping

         In JSON format, the Timestamp type is encoded as a string in the
         [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
         format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
         where {year} is always expressed using four digits while {month}, {day},
         {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
         seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
         are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
         is required. A proto3 JSON serializer should always use UTC (as indicated by
         "Z") when printing the Timestamp type and a proto3 JSON parser should be
         able to accept both UTC and other timezones (as indicated by an offset).

         For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
         01:30 UTC on January 15, 2017.

         In JavaScript, one can convert a Date object to this format using the
         standard
         [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
         method. In Python, a standard `datetime.datetime` object can be converted
         to this format using
         [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
         the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
         the Joda Time's [`ISODateTimeFormat.dateTime()`](
         http://joda-time.sourceforge.net/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime()
         ) to obtain a formatter capable of generating timestamps in this format.
    google.type.Date:
      type: object
      properties:
        year:
          type: integer
          title: year
          format: int32
          description: |-
            Year of the date. Must be from 1 to 9999, or 0 to specify a date without
             a year.
        month:
          type: integer
          title: month
          format: int32
          description: |-
            Month of a year. Must be from 1 to 12, or 0 to specify a year without a
             month and day.
        day:
          type: integer
          title: day
          format: int32
          description: |-
            Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
             to specify a year by itself or a year and month where the day isn't
             significant.
      title: Date
      additionalProperties: false
      description: |-
        Represents a whole or partial calendar date, such as a birthday. The time of
         day and time zone are either specified elsewhere or are insignificant. The
         date is relative to the Gregorian Calendar. This can represent one of the
         following:

         * A full date, with non-zero year, month, and day values
         * A month and day value, with a zero year, such as an anniversary
         * A year on its own, with zero month and day values
         * A year and month value, with a zero day, such as a credit card expiration
         date

         Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and
         `google.protobuf.Timestamp`.
    google.type.DateTime:
      type: object
      anyOf:
        - required:
            - timeZone
        - required:
            - utcOffset
        - not:
            anyOf:
              - required:
                  - timeZone
              - required:
                  - utcOffset
      properties:
        year:
          type: integer
          title: year
          format: int32
          description: |-
            Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a
             datetime without a year.
        month:
          type: integer
          title: month
          format: int32
          description: Required. Month of year. Must be from 1 to 12.
        day:
          type: integer
          title: day
          format: int32
          description: |-
            Required. Day of month. Must be from 1 to 31 and valid for the year and
             month.
        hours:
          type: integer
          title: hours
          format: int32
          description: |-
            Required. Hours of day in 24 hour format. Should be from 0 to 23. An API
             may choose to allow the value "24:00:00" for scenarios like business
             closing time.
        minutes:
          type: integer
          title: minutes
          format: int32
          description: Required. Minutes of hour of day. Must be from 0 to 59.
        seconds:
          type: integer
          title: seconds
          format: int32
          description: |-
            Required. Seconds of minutes of the time. Must normally be from 0 to 59. An
             API may allow the value 60 if it allows leap-seconds.
        nanos:
          type: integer
          title: nanos
          format: int32
          description: |-
            Required. Fractions of seconds in nanoseconds. Must be from 0 to
             999,999,999.
        utcOffset:
          title: utc_offset
          description: |-
            UTC offset. Must be whole seconds, between -18 hours and +18 hours.
             For example, a UTC offset of -4:00 would be represented as
             { seconds: -14400 }.
          $ref: '#/components/schemas/google.protobuf.Duration'
        timeZone:
          title: time_zone
          description: Time zone.
          $ref: '#/components/schemas/google.type.TimeZone'
      title: DateTime
      additionalProperties: false
      description: |-
        Represents civil time (or occasionally physical time).

         This type can represent a civil time in one of a few possible ways:

          * When utc_offset is set and time_zone is unset: a civil time on a calendar
            day with a particular offset from UTC.
          * When time_zone is set and utc_offset is unset: a civil time on a calendar
            day in a particular time zone.
          * When neither time_zone nor utc_offset is set: a civil time on a calendar
            day in local time.

         The date is relative to the Proleptic Gregorian Calendar.

         If year is 0, the DateTime is considered not to have a specific year. month
         and day must have valid, non-zero values.

         This type may also be used to represent a physical time if all the date and
         time fields are set and either case of the `time_offset` oneof is set.
         Consider using `Timestamp` message for physical time instead. If your use
         case also would like to store the user's timezone, that can be done in
         another field.

         This type is more flexible than some applications may want. Make sure to
         document and validate your application's limitations.
    google.type.TimeZone:
      type: object
      properties:
        id:
          type: string
          title: id
          description: IANA Time Zone Database time zone, e.g. "America/New_York".
        version:
          type: string
          title: version
          description: Optional. IANA Time Zone Database version number, e.g. "2019a".
      title: TimeZone
      additionalProperties: false
      description: |-
        Represents a time zone from the
         [IANA Time Zone Database](https://www.iana.org/time-zones).
    lava-protocol-version:
      type: number
      title: Lava-Protocol-Version
      enum:
        - 1
      description: Define the version of the Lava protocol
      const: 1
    Lava-timeout-header:
      type: number
      title: Lava-Timeout-Ms
      description: Define the timeout, in ms
    lava.error:
      type: object
      properties:
        status_code:
          type: string
          examples:
            - OK
          title: status code
          format: enum
          enum:
            - OK
            - Canceled
            - InvalidArgument
            - DeadlineExceeded
            - NotFound
            - AlreadyExists
            - PermissionDenied
            - ResourceExhausted
            - FailedPrecondition
            - Aborted
            - OutOfRange
            - Unimplemented
            - Internal
            - Unavailable
            - DataLoss
            - Unauthenticated
          description: GRPC code corresponding to HTTP status code, which can be converted to each other
        name:
          type: string
          description: Error name, e.g. lava.auth.token_not_found.
        message:
          type: string
          description: Error message, e.g. token not found
        code:
          type: number
          description: Business Code, e.g. 200001
        details:
          type: array
          items:
            $ref: '#/components/schemas/google.protobuf.Any'
          title: details
          description: Error detail include request or other user defined information
      title: Lava Error
      additionalProperties: true
      description: 'Error type returned by lava: https://github.com/pubgo/funk/blob/master/proto/errorpb/errors.proto'
    google.protobuf.Any:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
          format: binary
        debug:
          type: object
          additionalProperties: true
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
security: []
tags:
  - name: google.example.library.v1.LibraryService
    description: |-
      This API represents a simple digital library.  It lets you manage Shelf
       resources and Book resources in the library. It defines the following
       resource model:

       - The API has a collection of [Shelf][google.example.library.v1.Shelf]
         resources, named `shelves/*`

       - Each Shelf has a collection of [Book][google.example.library.v1.Book]
         resources, named `shelves/*/books/*`
