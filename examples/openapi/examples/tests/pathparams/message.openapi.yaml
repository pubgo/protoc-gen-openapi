openapi: 3.1.0
info:
  title: tests.pathparams.message.v1
paths:
  /v1/messages/{message_id}:
    get:
      tags:
        - tests.pathparams.message.v1.Messaging
      summary: GetMessage
      operationId: tests.pathparams.message.v1.Messaging.GetMessage
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            type: string
            title: message_id
        - name: userId
          in: query
          schema:
            type:
              - integer
              - string
            title: user_id
            format: int64
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
            application/proto:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tests.pathparams.message.v1.Message'
    post:
      tags:
        - tests.pathparams.message.v1.Messaging
      summary: CreateMessage
      operationId: tests.pathparams.message.v1.Messaging.CreateMessage
      parameters:
        - name: message_id
          in: path
          required: true
          schema:
            type: string
            title: message_id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type:
                    - integer
                    - string
                  title: user_id
                  format: int64
                content:
                  type: string
                  title: content
                maybe:
                  type: string
                  title: maybe
                  nullable: true
              title: Message
              additionalProperties: false
          application/proto:
            schema:
              type: object
              properties:
                userId:
                  type:
                    - integer
                    - string
                  title: user_id
                  format: int64
                content:
                  type: string
                  title: content
                maybe:
                  type: string
                  title: maybe
                  nullable: true
              title: Message
              additionalProperties: false
        required: true
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
            application/proto:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tests.pathparams.message.v1.Message'
  /v1/users/{user_id}/messages/{message_id}:
    get:
      tags:
        - tests.pathparams.message.v1.Messaging
      summary: GetUserMessage
      operationId: tests.pathparams.message.v1.Messaging.GetUserMessage
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type:
              - integer
              - string
            title: user_id
            format: int64
        - name: message_id
          in: path
          required: true
          schema:
            type: string
            title: message_id
      responses:
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/connect.error'
            application/proto:
              schema:
                $ref: '#/components/schemas/connect.error'
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tests.pathparams.message.v1.Message'
components:
  schemas:
    tests.pathparams.message.v1.Comment:
      type: object
      properties:
        commentId:
          type: string
          title: comment_id
        userId:
          type:
            - integer
            - string
          title: user_id
          format: int64
        content:
          type: string
          title: content
      title: Comment
      additionalProperties: false
    tests.pathparams.message.v1.GetMessageRequest:
      type: object
      properties:
        messageId:
          type: string
          title: message_id
        userId:
          type:
            - integer
            - string
          title: user_id
          format: int64
      title: GetMessageRequest
      additionalProperties: false
    tests.pathparams.message.v1.Message:
      type: object
      properties:
        messageId:
          type: string
          title: message_id
        userId:
          type:
            - integer
            - string
          title: user_id
          format: int64
        content:
          type: string
          title: content
        maybe:
          type: string
          title: maybe
          nullable: true
      title: Message
      additionalProperties: false
    tests.pathparams.message.v1.Meta:
      type: object
      properties:
        messageId:
          type: string
          title: message_id
        userId:
          type:
            - integer
            - string
          title: user_id
          format: int64
        content:
          type: string
          title: content
      title: Meta
      additionalProperties: false
    connect-protocol-version:
      type: number
      title: Connect-Protocol-Version
      enum:
        - 1
      description: Define the version of the Connect protocol
      const: 1
    connect-timeout-header:
      type: number
      title: Connect-Timeout-Ms
      description: Define the timeout, in ms
    connect.error:
      type: object
      properties:
        code:
          type: string
          examples:
            - not_found
          enum:
            - canceled
            - unknown
            - invalid_argument
            - deadline_exceeded
            - not_found
            - already_exists
            - permission_denied
            - resource_exhausted
            - failed_precondition
            - aborted
            - out_of_range
            - unimplemented
            - internal
            - unavailable
            - data_loss
            - unauthenticated
          description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
        message:
          type: string
          description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
        detail:
          $ref: '#/components/schemas/google.protobuf.Any'
      title: Connect Error
      additionalProperties: true
      description: 'Error type returned by Connect: https://connectrpc.com/docs/go/errors/#http-representation'
    google.protobuf.Any:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
          format: binary
        debug:
          type: object
          additionalProperties: true
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
security: []
tags:
  - name: tests.pathparams.message.v1.Messaging
